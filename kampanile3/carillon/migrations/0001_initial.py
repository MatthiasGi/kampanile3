# Generated by Django 5.2.5 on 2025-08-24 07:21

import carillon.models.rule
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Carillon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('port_name', models.CharField(blank=True, default='', help_text='The name of the serial port used to connect to the carillon.', max_length=255, verbose_name='Port Name')),
            ],
            options={
                'verbose_name': 'Carillon',
                'verbose_name_plural': 'Carillons',
            },
        ),
        migrations.CreateModel(
            name='Song',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('slug', models.SlugField(help_text='Unique identifier for the song to e.g. access it via API.', unique=True, verbose_name='Slug')),
                ('file', models.FileField(upload_to='carillon/songs/', verbose_name='MIDI file')),
                ('transpose', models.IntegerField(default=0, help_text='Transposition in semitones, e.g. -12 for one octave down.', verbose_name='Transpose')),
                ('tempo_multiplier', models.FloatField(default=1.0, help_text='A multiplier for the tempo of the song. This can be used to speed up or slow down the song.', verbose_name='Tempo Multiplier')),
            ],
            options={
                'verbose_name': 'Song',
                'verbose_name_plural': 'Songs',
            },
        ),
        migrations.CreateModel(
            name='Striker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('priority', models.IntegerField(default=0, help_text="The priority of this striker, used to determine if it should abort other strikers' songs.", verbose_name='Priority')),
                ('check_type', models.CharField(choices=[('M', 'Check manually, no automatic checks'), ('m', 'Check every minute'), ('q', 'Check every quarter hour'), ('h', 'Check every half hour'), ('H', 'Check every hour')], default='M', help_text='The type of check condition or interval.', max_length=1, verbose_name='Check type')),
                ('carillon', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='strikers', to='carillon.carillon', verbose_name='Carillon')),
            ],
            options={
                'verbose_name': 'Striker',
                'verbose_name_plural': 'Strikers',
            },
        ),
        migrations.CreateModel(
            name='Rule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('priority', models.PositiveSmallIntegerField(default=0, help_text='The priority of the rule. Higher values means firstly evaluated.', verbose_name='Priority')),
                ('cancel_following', models.BooleanField(default=False, help_text='If checked, no following rule with smaller priority will be executed if this rule applies.', verbose_name='Cancel following rules')),
                ('condition', models.JSONField(blank=True, default=dict, help_text='A JSON object actually defining the condition.', validators=[carillon.models.rule.validate_rule_condition], verbose_name='Condition')),
                ('repeat', models.CharField(choices=[('o', 'Off'), ('h12', 'For every hour once 12-based'), ('h24', 'For every hour once 24-based'), ('m15', 'For every 15 minutes'), ('m30', 'For every 30 minutes')], default='o', help_text='How often the played song should be repeated if the rule applies.', max_length=3, verbose_name='Repeat')),
                ('song', models.ForeignKey(blank=True, help_text='The song to play when the rule applies.', null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='+', to='carillon.song', verbose_name='Song')),
                ('striker', models.ForeignKey(help_text='The striker that checks, if the rule applies.', on_delete=django.db.models.deletion.CASCADE, related_name='rules', to='carillon.striker', verbose_name='Striker')),
            ],
            options={
                'verbose_name': 'Rule',
                'verbose_name_plural': 'Rules',
                'ordering': ['priority'],
            },
        ),
    ]
